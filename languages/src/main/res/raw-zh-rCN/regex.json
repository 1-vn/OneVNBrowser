{
  "title": "执行模式说明",
  "basic": "基础",
  "wildcard": {
    "title": "通配符",
    "sharp_info": "匹配单个数字（0-9）字符（解释为“\\d”)",
    "question_info": "匹配单个任意字符（解释为“.”）",
    "asterisk_info": "匹配任意 0 个或多个字符（解释为“.*”）",
    "plus_info": "匹配任意 1 个或多个字符（解释为“.+”）",
    "escape": "若需要将这些字符作为普通文本使用，可前置一个反斜线符号。",
    "regexp": "同时，你也可以使用<code>[]</code>符号来包含正则表达式。",
    "case": "所有执行模式均区分大小写。"
  },
  "wildcard_desc": {
    "title": "通配符描述",
    "sharp": "通配符“#”",
    "sharp_info": "“#”匹配单个 0-9 的数字。",
    "sharp_ex1": "例.1) 模式字符串 = <code>IMG#.jpg</code>",
    "sharp_ex1_info": "若地址包含 <code>IMG0.jpg</code> 或 <code>IMG1.jpg</code> 或 ... 或 <code>IMG8.jpg</code> 或 <code>IMG9.jpg</code>，则匹配。",
    "sharp_ex1_but": "若地址为 <code>http://www.test.com/IMG.jpg</code>，由于“IMG”之后不包含一个数字，则此地址不匹配。",
    "sharp_ex2": "例.2) 模式字符串 = <code>IMG###.jpg</code>",
    "sharp_ex2_info": "若地址包含 <code>IMG000.jpg</code> 或 <code>IMG001.jpg</code> 或 ... 或 <code>IMG998.jpg</code> 或 <code>IMG999.jpg</code>，则匹配。",
    "sharp_ex2_but": "若地址为 <code>http://www.test.com/IMG0a1.jpg</code>，由于不包含三个连续的数字，则此地址不匹配。",
    "question": "通配符“？”",
    "question_info": "“?”匹配单个任意字符。",
    "question_ex1": "例.1) 模式字符串 = <code>IMG_?.jpg</code>",
    "question_ex1_info": "若在地址表达式的 <code>IMG_</code> 和 <code>.jpg</code> 之间存在单个字符，则匹配。",
    "question_ex1_ex": "若地址为 <code>http://www.test.com/IMG_l.jpg</code>，则匹配。",
    "question_ex2": "例.2) 模式字符串 = <code>IMG_???.jpg</code>",
    "question_ex2_info": "此执行模式将会匹配所有在 <code>IMG_</code> 和 <code>.jpg</code> 之间存在三个字符的地址。",
    "asterisk": "通配符“*”",
    "asterisk_info": "“*”匹配任意 0 个或多个字符。",
    "asterisk_ex": "例.) 模式字符串 = <code>IMG_*.jpg</code>",
    "asterisk_ex_info": "若地址表达式的 <code>IMG_</code> 和 <code>.jpg</code> 之间存在 0 个或多个字符串，则匹配。",
    "asterisk_ex_info_ex": "也就是说，它会匹配 <code>IMG_.jpg</code>、<code>IMG_000.jpg</code> 和 <code>IMG_000abc.jpg</code> 之中的任何一个。",
    "plus": "通配符“+”",
    "plus_info": "“+”匹配任意 1 个或多个字符。",
    "plus_ex": "例.) 模式字符串 = <code>IMG_+.jpg</code>",
    "plus_ex_info": "若地址表达式的 <code>IMG_</code> 和 <code>.jpg</code> 之间存在 1 个或多个字符，则匹配。",
    "plus_ex_not": "也就是说它将匹配 <code>IMG_.jpg</code>、<code>IMG_000.jpg</code> 和 <code>IMG_000abc.jpg</code> 之中的任何一个。",
    "plus_ex_then": "若地址的 <code>IMG_</code> 和 <code>.jpg</code> 之间不存在任何字符，则不匹配。",
    "regexp": "正则表达式",
    "regexp_info": "包含在“[]”之间的执行模式将会作为正则表达式处理。<br>正则表达式遵守 Java 格式。",
    "regexp_ex": "例.) <code>[https?://www\\.test\\.com/IMG_*\\.jpg]</code>"
  },
  "pattern": {
    "title": "执行模式匹配",
    "info": "若未指定如 <code>http://</code> 之类的协议，将会自动加入。（添加 <code>^\\w+://</code>）",
    "ex": "若创建了如 <code>*test.com</code> 之类的执行模式，将会对地址进行匹配，例如 <code>http://other.com/?page=test.com</code>。",
    "sub_domain": "若需要替换子域名",
    "sub_domain_info": "以<code>*.</code> 或 <code>http://*.</code> 开头。（<code>*.</code> 可替换为 <code>((?![./]).)*</code>）",
    "sub_domain_ex": "例.) 模式字符串 = <code>*.test.com</code>",
    "sub_domain_match": "将会匹配 <code>mobile.test.com</code>、<code>doc.test.com</code>",
    "sub_domain_not": "但 <code>mobile.doc.test.com</code> 则不会匹配，因为子域名包含 <code>.</code>。",
    "https": "若执行模式的开头为 <code>http*://</code>",
    "https_info": "没有必要这么做，因为浏览器会自动完成此部分。",
    "https_replace": "此部分将在内部自动被替换为 <code>https?://</code> 以防止伪阳性结果。"
  },
  "ad_block": {
    "title": "广告拦截",
    "not_wildcard": "不使用通配符将会提升运行速度。",
    "not_regex": "同时，正则表达式中存在复杂的模式也会影响性能。",
    "not_use_wildcard": "若不使用通配符（<code>#?*+</code>）",
    "not_use_wildcard_info": "若地址中存在指定的字符串，则会拦截。",
    "not_use_wildcard_ex": "例.) 模式字符串 = <code>ad.jpg</code>",
    "not_use_wildcard_ex_info": "将会拦截 <code>http://test.com/ad/ad.jpg</code>、<code>https://test.jp/ad/img/ad.jpg</code> 等。",
    "use_wildcard": "若不使用通配符（<code>#?*+</code>）",
    "use_wildcard_info": "例 .) 模式字符串 =<code>/ad/+.jpg</code>",
    "host": "主机拦截",
    "host_info": "拦截所有指定的主机。",
    "host_perfect": "完整匹配",
    "host_perfect_info": "<code>h ad.test.com</code> 在“h”后添加空格即可指定。",
    "host_perfect_info_ex": "可用于在拦截 <code>http://ad.test.com</code> 的同时略过 <code>http://test.com</code>。",
    "host_perfect_info_wildcard": "可使用通配符",
    "host_perfect_ex": "例.) <code>h ad.+.com</code>、<code>h ad.test.*</code>",
    "host_perfect_hosts": "<code>127.0.0.1 ad.com</code> 也可通过 host 格式指定。",
    "host_partial": "部分匹配",
    "host_partial_info": "<code>c ad.com</code> 在“c”后添加空格即可指定",
    "host_partial_info_ex": "将会拦截 <code>http://ad.com</code>、<code>http://abc.ad.com</code>、<code>http://ad001.ad.com</code> 等。",
    "host_partial_not_wildcard": "<font color=\"red\">无法使用通配符。</font>",
    "host_regex": "若需要在主机拦截中使用正则表达式",
    "host_regex_info": "<code>h [test\\.com]</code> 即可指定。"
  }
}